// Code generated by sqlc. DO NOT EDIT.
// source: example.sql

package db

import (
	"context"
)

const countAllExample = `-- name: CountAllExample :one
SELECT COUNT(*) FROM example
`

func (q *Queries) CountAllExample(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllExample)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAllExample = `-- name: DeleteAllExample :exec
DELETE FROM example
`

func (q *Queries) DeleteAllExample(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllExample)
	return err
}

const insertExample = `-- name: InsertExample :one
INSERT INTO example (
  id,
  usecase_id,
  sentence
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, usecase_id, sentence
`

type InsertExampleParams struct {
	ID        int64  `json:"id"`
	UsecaseID int64  `json:"usecase_id"`
	Sentence  string `json:"sentence"`
}

func (q *Queries) InsertExample(ctx context.Context, arg InsertExampleParams) (Example, error) {
	row := q.db.QueryRowContext(ctx, insertExample, arg.ID, arg.UsecaseID, arg.Sentence)
	var i Example
	err := row.Scan(&i.ID, &i.UsecaseID, &i.Sentence)
	return i, err
}

const listExampleByUsecase = `-- name: ListExampleByUsecase :many
SELECT id, usecase_id, sentence FROM example
WHERE usecase_id = $1
`

func (q *Queries) ListExampleByUsecase(ctx context.Context, usecaseID int64) ([]Example, error) {
	rows, err := q.db.QueryContext(ctx, listExampleByUsecase, usecaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Example{}
	for rows.Next() {
		var i Example
		if err := rows.Scan(&i.ID, &i.UsecaseID, &i.Sentence); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
