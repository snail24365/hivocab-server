// Code generated by sqlc. DO NOT EDIT.
// source: writing.sql

package db

import (
	"context"
)

const getWritingsByUserIdAndUsecaseId = `-- name: GetWritingsByUserIdAndUsecaseId :many
SELECT id, writing, usecase_id, user_id, created_at FROM writing WHERE user_id = $1 AND usecase_id = $2
`

type GetWritingsByUserIdAndUsecaseIdParams struct {
	UserID    int64 `json:"user_id"`
	UsecaseID int64 `json:"usecase_id"`
}

func (q *Queries) GetWritingsByUserIdAndUsecaseId(ctx context.Context, arg GetWritingsByUserIdAndUsecaseIdParams) ([]Writing, error) {
	rows, err := q.db.QueryContext(ctx, getWritingsByUserIdAndUsecaseId, arg.UserID, arg.UsecaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Writing{}
	for rows.Next() {
		var i Writing
		if err := rows.Scan(
			&i.ID,
			&i.Writing,
			&i.UsecaseID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWriting = `-- name: InsertWriting :one
INSERT INTO writing (
  writing,
  usecase_id,
  user_id
) VALUES (
  $1,
  $2,
  $3
)
RETURNING id, writing, usecase_id, user_id, created_at
`

type InsertWritingParams struct {
	Writing   string `json:"writing"`
	UsecaseID int64  `json:"usecase_id"`
	UserID    int64  `json:"user_id"`
}

func (q *Queries) InsertWriting(ctx context.Context, arg InsertWritingParams) (Writing, error) {
	row := q.db.QueryRowContext(ctx, insertWriting, arg.Writing, arg.UsecaseID, arg.UserID)
	var i Writing
	err := row.Scan(
		&i.ID,
		&i.Writing,
		&i.UsecaseID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
