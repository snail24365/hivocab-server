// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  password
) VALUES (
  $1,
  $2
)
RETURNING id, username, password, latest_visit, study_amount, study_goal, password_changed_at, created_at, study_index
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.LatestVisit,
		&i.StudyAmount,
		&i.StudyGoal,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.StudyIndex,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, latest_visit, study_amount, study_goal, password_changed_at, created_at, study_index FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.LatestVisit,
		&i.StudyAmount,
		&i.StudyGoal,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.StudyIndex,
	)
	return i, err
}
