// Code generated by sqlc. DO NOT EDIT.
// source: word.sql

package db

import (
	"context"
)

const countAllWord = `-- name: CountAllWord :one
SELECT COUNT(*) FROM word
`

func (q *Queries) CountAllWord(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllWord)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAllWord = `-- name: DeleteAllWord :exec
DELETE FROM word
`

func (q *Queries) DeleteAllWord(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllWord)
	return err
}

const getWordById = `-- name: GetWordById :one
SELECT id, spelling FROM word
WHERE id = $1
`

func (q *Queries) GetWordById(ctx context.Context, id int64) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWordById, id)
	var i Word
	err := row.Scan(&i.ID, &i.Spelling)
	return i, err
}

const getWordByPage = `-- name: GetWordByPage :many
SELECT id, spelling FROM word
LIMIT $1
OFFSET $2
`

type GetWordByPageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetWordByPage(ctx context.Context, arg GetWordByPageParams) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getWordByPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Word{}
	for rows.Next() {
		var i Word
		if err := rows.Scan(&i.ID, &i.Spelling); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordBySpelling = `-- name: GetWordBySpelling :one
SELECT id, spelling FROM word
WHERE spelling = $1 LIMIT 1
`

func (q *Queries) GetWordBySpelling(ctx context.Context, spelling string) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWordBySpelling, spelling)
	var i Word
	err := row.Scan(&i.ID, &i.Spelling)
	return i, err
}

const insertWord = `-- name: InsertWord :one
INSERT INTO word (
  id,
  spelling
) VALUES (
  $1,$2
)
RETURNING id, spelling
`

type InsertWordParams struct {
	ID       int64  `json:"id"`
	Spelling string `json:"spelling"`
}

func (q *Queries) InsertWord(ctx context.Context, arg InsertWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, insertWord, arg.ID, arg.Spelling)
	var i Word
	err := row.Scan(&i.ID, &i.Spelling)
	return i, err
}
