// Code generated by sqlc. DO NOT EDIT.
// source: word.sql

package db

import (
	"context"
)

const countAllWords = `-- name: CountAllWords :one
SELECT COUNT(*) FROM word
`

func (q *Queries) CountAllWords(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllWords)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWord = `-- name: CreateWord :one
INSERT INTO word (
  spelling
) VALUES (
  $1
)
RETURNING id, spelling
`

func (q *Queries) CreateWord(ctx context.Context, spelling string) (Word, error) {
	row := q.db.QueryRowContext(ctx, createWord, spelling)
	var i Word
	err := row.Scan(&i.ID, &i.Spelling)
	return i, err
}

const getWordBySpelling = `-- name: GetWordBySpelling :one
SELECT id, spelling FROM word
WHERE spelling = $1 LIMIT 1
`

func (q *Queries) GetWordBySpelling(ctx context.Context, spelling string) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWordBySpelling, spelling)
	var i Word
	err := row.Scan(&i.ID, &i.Spelling)
	return i, err
}

const listWordByPage = `-- name: ListWordByPage :many
SELECT id, spelling FROM word
LIMIT $1
OFFSET $2
`

type ListWordByPageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWordByPage(ctx context.Context, arg ListWordByPageParams) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, listWordByPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(&i.ID, &i.Spelling); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
