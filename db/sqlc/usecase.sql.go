// Code generated by sqlc. DO NOT EDIT.
// source: usecase.sql

package db

import (
	"context"
)

const createUsecase = `-- name: CreateUsecase :one
INSERT INTO usecase (
  word_id,
  description_sentence
) VALUES (
  $1,
  $2
)
RETURNING id, word_id, description_sentence
`

type CreateUsecaseParams struct {
	WordID              int64  `json:"word_id"`
	DescriptionSentence string `json:"description_sentence"`
}

func (q *Queries) CreateUsecase(ctx context.Context, arg CreateUsecaseParams) (Usecase, error) {
	row := q.db.QueryRowContext(ctx, createUsecase, arg.WordID, arg.DescriptionSentence)
	var i Usecase
	err := row.Scan(&i.ID, &i.WordID, &i.DescriptionSentence)
	return i, err
}

const listUsecaseByWord = `-- name: ListUsecaseByWord :many
SELECT id, word_id, description_sentence FROM usecase
WHERE word_id = $1
`

func (q *Queries) ListUsecaseByWord(ctx context.Context, wordID int64) ([]Usecase, error) {
	rows, err := q.db.QueryContext(ctx, listUsecaseByWord, wordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usecase
	for rows.Next() {
		var i Usecase
		if err := rows.Scan(&i.ID, &i.WordID, &i.DescriptionSentence); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
