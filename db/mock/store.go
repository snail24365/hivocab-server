// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/snail24365/hivocab-server/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/snail24365/hivocab-server/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountAllExample mocks base method.
func (m *MockStore) CountAllExample(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllExample", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllExample indicates an expected call of CountAllExample.
func (mr *MockStoreMockRecorder) CountAllExample(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllExample", reflect.TypeOf((*MockStore)(nil).CountAllExample), arg0)
}

// CountAllUsecase mocks base method.
func (m *MockStore) CountAllUsecase(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllUsecase", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllUsecase indicates an expected call of CountAllUsecase.
func (mr *MockStoreMockRecorder) CountAllUsecase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllUsecase", reflect.TypeOf((*MockStore)(nil).CountAllUsecase), arg0)
}

// CountAllWord mocks base method.
func (m *MockStore) CountAllWord(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllWord", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllWord indicates an expected call of CountAllWord.
func (mr *MockStoreMockRecorder) CountAllWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllWord", reflect.TypeOf((*MockStore)(nil).CountAllWord), arg0)
}

// DeleteAllExample mocks base method.
func (m *MockStore) DeleteAllExample(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllExample", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllExample indicates an expected call of DeleteAllExample.
func (mr *MockStoreMockRecorder) DeleteAllExample(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllExample", reflect.TypeOf((*MockStore)(nil).DeleteAllExample), arg0)
}

// DeleteAllUsecase mocks base method.
func (m *MockStore) DeleteAllUsecase(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUsecase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUsecase indicates an expected call of DeleteAllUsecase.
func (mr *MockStoreMockRecorder) DeleteAllUsecase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUsecase", reflect.TypeOf((*MockStore)(nil).DeleteAllUsecase), arg0)
}

// DeleteAllWord mocks base method.
func (m *MockStore) DeleteAllWord(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllWord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllWord indicates an expected call of DeleteAllWord.
func (mr *MockStoreMockRecorder) DeleteAllWord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllWord", reflect.TypeOf((*MockStore)(nil).DeleteAllWord), arg0)
}

// GetUsecaseById mocks base method.
func (m *MockStore) GetUsecaseById(arg0 context.Context, arg1 int64) (db.Usecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsecaseById", arg0, arg1)
	ret0, _ := ret[0].(db.Usecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsecaseById indicates an expected call of GetUsecaseById.
func (mr *MockStoreMockRecorder) GetUsecaseById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsecaseById", reflect.TypeOf((*MockStore)(nil).GetUsecaseById), arg0, arg1)
}

// GetUsecaseByWord mocks base method.
func (m *MockStore) GetUsecaseByWord(arg0 context.Context, arg1 int64) ([]db.Usecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsecaseByWord", arg0, arg1)
	ret0, _ := ret[0].([]db.Usecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsecaseByWord indicates an expected call of GetUsecaseByWord.
func (mr *MockStoreMockRecorder) GetUsecaseByWord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsecaseByWord", reflect.TypeOf((*MockStore)(nil).GetUsecaseByWord), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetWordById mocks base method.
func (m *MockStore) GetWordById(arg0 context.Context, arg1 int64) (db.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordById", arg0, arg1)
	ret0, _ := ret[0].(db.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordById indicates an expected call of GetWordById.
func (mr *MockStoreMockRecorder) GetWordById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordById", reflect.TypeOf((*MockStore)(nil).GetWordById), arg0, arg1)
}

// GetWordByPage mocks base method.
func (m *MockStore) GetWordByPage(arg0 context.Context, arg1 db.GetWordByPageParams) ([]db.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordByPage", arg0, arg1)
	ret0, _ := ret[0].([]db.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordByPage indicates an expected call of GetWordByPage.
func (mr *MockStoreMockRecorder) GetWordByPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordByPage", reflect.TypeOf((*MockStore)(nil).GetWordByPage), arg0, arg1)
}

// GetWordBySpelling mocks base method.
func (m *MockStore) GetWordBySpelling(arg0 context.Context, arg1 string) (db.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordBySpelling", arg0, arg1)
	ret0, _ := ret[0].(db.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordBySpelling indicates an expected call of GetWordBySpelling.
func (mr *MockStoreMockRecorder) GetWordBySpelling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordBySpelling", reflect.TypeOf((*MockStore)(nil).GetWordBySpelling), arg0, arg1)
}

// InsertExample mocks base method.
func (m *MockStore) InsertExample(arg0 context.Context, arg1 db.InsertExampleParams) (db.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExample", arg0, arg1)
	ret0, _ := ret[0].(db.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertExample indicates an expected call of InsertExample.
func (mr *MockStoreMockRecorder) InsertExample(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExample", reflect.TypeOf((*MockStore)(nil).InsertExample), arg0, arg1)
}

// InsertUsecase mocks base method.
func (m *MockStore) InsertUsecase(arg0 context.Context, arg1 db.InsertUsecaseParams) (db.Usecase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUsecase", arg0, arg1)
	ret0, _ := ret[0].(db.Usecase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUsecase indicates an expected call of InsertUsecase.
func (mr *MockStoreMockRecorder) InsertUsecase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUsecase", reflect.TypeOf((*MockStore)(nil).InsertUsecase), arg0, arg1)
}

// InsertUser mocks base method.
func (m *MockStore) InsertUser(arg0 context.Context, arg1 db.InsertUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockStoreMockRecorder) InsertUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockStore)(nil).InsertUser), arg0, arg1)
}

// InsertWord mocks base method.
func (m *MockStore) InsertWord(arg0 context.Context, arg1 db.InsertWordParams) (db.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWord", arg0, arg1)
	ret0, _ := ret[0].(db.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWord indicates an expected call of InsertWord.
func (mr *MockStoreMockRecorder) InsertWord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWord", reflect.TypeOf((*MockStore)(nil).InsertWord), arg0, arg1)
}

// ListExampleByUsecase mocks base method.
func (m *MockStore) ListExampleByUsecase(arg0 context.Context, arg1 int64) ([]db.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExampleByUsecase", arg0, arg1)
	ret0, _ := ret[0].([]db.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExampleByUsecase indicates an expected call of ListExampleByUsecase.
func (mr *MockStoreMockRecorder) ListExampleByUsecase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExampleByUsecase", reflect.TypeOf((*MockStore)(nil).ListExampleByUsecase), arg0, arg1)
}
